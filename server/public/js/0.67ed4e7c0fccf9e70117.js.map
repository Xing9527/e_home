{"version":3,"sources":["webpack:///src/view/news_add.vue","webpack:///./src/view/news_add.vue?e6f0","webpack:///./src/view/news_add.vue","webpack:///src/components/uploadImg.vue","webpack:///./src/components/uploadImg.vue?bc65","webpack:///./src/components/uploadImg.vue","webpack:///src/components/editor.vue","webpack:///./src/components/editor.vue?e45c","webpack:///./src/components/editor.vue","webpack:///./node_modules/wangeditor/release/wangEditor.js"],"names":["news_add","uploadImg","Editor","editor","val","_this","this","_this2","_this3","data","view_news_add","render","_vm","_h","$createElement","_c","_self","staticClass","ref","attrs","model","formData","label-width","label","value","callback","$$v","$set","expression","_v","on","getTxt","getText","staticStyle","margin-bottom","placeholder","_l","item","key","$route","name","click","upData","_e","update","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","String","img","getToken","components_uploadImg","action","show-file-list","on-success","upload","token","src","html","text","FormData","url","create","change","components_editor","id","factory","isDOMList","selector","HTMLCollection","NodeList","eventList","DomElement","div","nodeType","selectorResult","Array","replace","trim","indexOf","document","createElement","innerHTML","children","result","querySelectorAll","length","i","$","prototype","constructor","forEach","fn","elem","call","clone","deep","cloneList","push","cloneNode","get","index","first","last","type","types","split","addEventListener","e","target","matches","off","removeEventListener","attr","getAttribute","setAttribute","addClass","className","arr","filter","join","removeClass","css","currentStyle","style","resultArr","map","show","hide","childNodes","append","$children","child","appendChild","remove","parent","parentElement","removeChild","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","nodeName","find","focus","parentUntil","_currentElem","results","equal","$elem","insertBefore","referenceNode","parentNode","insertAfter","lastChild","nextSibling","offAll","config","menus","fontNames","colors","emotions","title","content","alt","zIndex","debug","linkCheck","link","linkImgCheck","pasteFilterStyle","pasteIgnoreImg","pasteTextHandle","showLinkImg","linkImgCallback","uploadImgMaxSize","uploadImgShowBase64","uploadFileName","uploadImgParams","uploadImgHeaders","withCredentials","uploadImgTimeout","uploadImgHooks","before","xhr","files","success","fail","error","timeout","qiniu","UA","_ua","navigator","userAgent","isWebkit","test","isIE","window","objForEach","obj","hasOwnProperty","arrForEach","fakeArr","getRandom","prefix","Math","random","toString","slice","replaceHtmlSymbol","isFunction","Bold","_active","onClick","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","replaceLang","str","langArgs","reg","_emptyFn","DropList","menu","opt","$container","$title","titleHtml","list","$list","elemHtml","$li","hideTimeoutId","setTimeout","_rendered","_show","Head","droplist","width","_command","FontSize","FontName","fontName","clearTimeout","$menuELem","menuHeight","height","showTimeoutId","$selectionElem","getSelectionContainerElem","$textElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","color","BackColor","Quote","Code","Emoticon","Table","Video","Image","imgMenuId","$body","$textContainerElem","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","tpl","$content","_index","stopPropagation","events","event","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","selectionText","checkResult","alert","$selectionELem","$parent","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","tabConfig","emotData","emotType","faceHtml","$target","insertHtml","_insert","emotHtml","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","c","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$trs","trLength","tr","locationData","$currentTr","newTr","trData","tdIndex","$currentTd","toLowerCase","$table","textValId","width30","width50","width100","delBtn","$img","_selectedImg","upTriggerId","upFileId","linkUrlId","linkBtnId","tabsConfig","fileElem","fileList","insertLinkImg","tabsConfigResult","uploadImgServer","customUploadImg","FileReader","MenuConstructors","Menus","getPasteText","clipboardData","originalEvent","getData","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$bar","bold","head","fontSize","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","code","emoticon","table","video","image","init","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","getJSON","getChildrenJSON","curElem","elemResult","textContent","tag","attrData","attrList","attributes","attrListLength","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","_dragHandle","saveRange","insertEmptyP","$p","keyCode","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","codeHandle","txtHtml","ignoreImg","pasteTime","canDo","now","Date","flag","pasteHtml","filterStyle","pasteText","docSplitHtml","getPasteHtml","ex","pasteFiles","items","getAsFile","getPasteImgs","dataTransfer","_useStyleWithCSS","execCommand","_name","_execCommand","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","timeoutId","_hide","_typeof","Symbol","iterator","UploadImg","_alert","alertInfo","debugInfo","customAlert","Error","onload","onerror","onabort","maxSize","maxSizeM","maxLength","uploadImgMaxLength","uploadImgParamsWithUrl","hooks","resultFiles","errInfo","file","size","bind","formdata","uploadImgServerArr","uploadImgServerHash","XMLHttpRequest","open","ontimeout","onprogress","percent","progressBar","lengthComputable","loaded","total","onreadystatechange","readyState","status","responseText","JSON","parse","customInsert","errno","beforeResult","prevent","msg","setRequestHeader","send","reader","readAsDataURL","editorId","toolbarSelector","textSelector","customConfig","_initConfig","Object","assign","lang","RegExp","_initDom","$toolbarSelector","config$$1","toolbarElemId","textElemId","compositionEnd","onfocus","onblur","isFocus","isChild","isToolbar","isMenu","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","txt","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchangeTimeout","onchange","currentHtml","_offAllEvent","varArgs","TypeError","to","arguments","nextSource","nextKey","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","getElementsByTagName","wangEditor","module","exports"],"mappings":"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","file":"public/js/0.67ed4e7c0fccf9e70117.js","sourcesContent":["<template>\r\n  <div class=\"add\">\r\n      <el-form ref=\"form\" :model=\"formData\" label-width=\"80px\">\r\n          <el-form-item label=\"新闻标题\">\r\n              <el-input v-model=\"formData.title\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"新闻头图\"  >\r\n              <uploadImg v-model=\"formData.img\"></uploadImg>\r\n          </el-form-item>\r\n          <el-form-item label=\"主体内容\">\r\n              <Editor v-model=\"formData.content\" @getTxt=\"getText\"></Editor>\r\n          </el-form-item>\r\n          <el-form-item label=\"新闻分类\" style=\"margin-bottom:80px;\">\r\n              <el-select v-model=\"formData.type\" placeholder=\"请选择\">\r\n                <el-option\r\n                  v-for=\"item in options\"\r\n                  :key=\"item.value\"\r\n                  :label=\"item.label\"\r\n                  :value=\"item.value\">\r\n                </el-option>\r\n              </el-select>\r\n          </el-form-item>\r\n          <el-form-item>\r\n              <el-button v-if=\"$route.name == '新闻添加页'\" @click=\"upData\">添加</el-button>\r\n              <el-button v-if=\"$route.name == '新闻修改页'\" @click=\"update\">保存修改</el-button>\r\n          </el-form-item>\r\n      </el-form>\r\n  </div>\r\n</template>\r\n<script>\r\nimport uploadImg from \"@/components/uploadImg\";\r\nimport Editor from \"@/components/editor\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      formData: {\r\n        title: \"\",\r\n        img: \"\",\r\n        content: \"\",\r\n        contentText: \"\",\r\n        type: \"\"\r\n      },\r\n      options: [{\r\n          value: '信工新闻眼',\r\n          label: '信工新闻眼'\r\n        }, {\r\n          value: '政治学习',\r\n          label: '政治学习'\r\n        }, {\r\n          value: '党建一点通',\r\n          label: '党建一点通'\r\n        }, {\r\n          value: '党员亮身份',\r\n          label: '党员亮身份'\r\n        }, {\r\n          value: '随时随地学',\r\n          label: '随时随地学'\r\n        }, {\r\n          value: '随时随地拍',\r\n          label: '随时随地拍'\r\n        }, {\r\n          value: '制度建设',\r\n          label: '制度建设'\r\n        }, {\r\n          value: '特色活动',\r\n          label: '特色活动'\r\n        }, {\r\n          value: '通知早知道',\r\n          label: '通知早知道'\r\n        }],\r\n    };\r\n  },\r\n  components: {\r\n    uploadImg,\r\n    Editor\r\n  },\r\n  methods: {\r\n    getText(val) {\r\n      this.formData.contentText = val;\r\n    },\r\n    upData() {\r\n      this.$axios.post(\"addNews\", this.formData).then(res => {\r\n        // console.log(res.data)\r\n        if (res.ret) {\r\n          this.$message({\r\n            message: '恭喜你，添加成功',\r\n            type: 'success'\r\n          });\r\n          setTimeout(() => {\r\n            this.$router.push('/news/list')\r\n          },1000)\r\n        }else{\r\n          this.$message.error('添加新闻出错！！！');\r\n        }\r\n      });\r\n    },\r\n    update() {\r\n      this.$axios.post(\"updateNews\", this.formData).then(res => {\r\n        if (res.ret) {\r\n          this.$message({\r\n            message: '恭喜你，修改成功',\r\n            type: 'success'\r\n          });\r\n          setTimeout(() => {\r\n            this.$router.push('/news/list')\r\n          },1000)\r\n        }else{\r\n          this.$message.error('修改新闻出错！！！');\r\n        }\r\n      });\r\n    },\r\n    \r\n  },\r\n  created() {\r\n    if (this.$route.name == \"新闻修改页\") {\r\n      this.$axios.get(\"getNews\",{id:this.$route.query.id}).then(res => {\r\n        this.formData = res.data;\r\n        // console.log(res.data)\r\n      });\r\n    }\r\n  },\r\n  watch: {\r\n    $route(to, from, next) {\r\n      if (to.name == \"新闻添加页\") {\r\n        this.formData = {\r\n          title: \"\",\r\n          img: \"\",\r\n          content: \"\",\r\n          contentText: \"\",\r\n          type: \"\"\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n.add {\r\n  margin-left: 230px;\r\n  padding: 20px 20px 180px;\r\n  margin-top: 40px;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/view/news_add.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"add\"},[_c('el-form',{ref:\"form\",attrs:{\"model\":_vm.formData,\"label-width\":\"80px\"}},[_c('el-form-item',{attrs:{\"label\":\"新闻标题\"}},[_c('el-input',{model:{value:(_vm.formData.title),callback:function ($$v) {_vm.$set(_vm.formData, \"title\", $$v)},expression:\"formData.title\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"新闻头图\"}},[_c('uploadImg',{model:{value:(_vm.formData.img),callback:function ($$v) {_vm.$set(_vm.formData, \"img\", $$v)},expression:\"formData.img\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"主体内容\"}},[_c('Editor',{on:{\"getTxt\":_vm.getText},model:{value:(_vm.formData.content),callback:function ($$v) {_vm.$set(_vm.formData, \"content\", $$v)},expression:\"formData.content\"}})],1),_vm._v(\" \"),_c('el-form-item',{staticStyle:{\"margin-bottom\":\"80px\"},attrs:{\"label\":\"新闻分类\"}},[_c('el-select',{attrs:{\"placeholder\":\"请选择\"},model:{value:(_vm.formData.type),callback:function ($$v) {_vm.$set(_vm.formData, \"type\", $$v)},expression:\"formData.type\"}},_vm._l((_vm.options),function(item){return _c('el-option',{key:item.value,attrs:{\"label\":item.label,\"value\":item.value}})}))],1),_vm._v(\" \"),_c('el-form-item',[(_vm.$route.name == '新闻添加页')?_c('el-button',{on:{\"click\":_vm.upData}},[_vm._v(\"添加\")]):_vm._e(),_vm._v(\" \"),(_vm.$route.name == '新闻修改页')?_c('el-button',{on:{\"click\":_vm.update}},[_vm._v(\"保存修改\")]):_vm._e()],1)],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-77dac04d\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/view/news_add.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-77dac04d\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./news_add.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./news_add.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./news_add.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-77dac04d\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./news_add.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-77dac04d\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/news_add.vue\n// module id = null\n// module chunks = ","<template>\r\n  <div class=\"upload\">\r\n    <el-upload\r\n        class=\"avatar-uploader\"\r\n        action=\"https://upload-z1.qiniup.com\"\r\n        :show-file-list=\"false\"\r\n        :on-success=\"upload\"\r\n        :data=\"{token:token}\">\r\n        <img v-if=\"img\" :src=\"img\" class=\"avatar\">\r\n        <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n    </el-upload>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      img:\"\",\r\n      token:\"\"\r\n    }\r\n  },\r\n  props:{\r\n    value:{\r\n        type:String\r\n      }\r\n  },\r\n  methods:{\r\n    upload(res) {\r\n      // console.log(res)\r\n      this.img = \"http://image.yaojunrong.com/\" + res.key;\r\n      this.$emit(\"input\",this.img)\r\n    },\r\n    getToken() {\r\n      this.$axios.qiniuGet().then(res => {\r\n        this.token = res.data\r\n      })\r\n    }\r\n  },\r\n  created() {\r\n    this.getToken()\r\n  },\r\n  watch:{\r\n    value(val) {\r\n      this.img = val\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n  .avatar-uploader .el-upload {\r\n    border: 1px dashed #d9d9d9;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    overflow: hidden;\r\n  }\r\n  .avatar-uploader .el-upload:hover {\r\n    border-color: #409EFF;\r\n  }\r\n  .avatar-uploader-icon {\r\n    font-size: 28px;\r\n    color: #8c939d;\r\n    width: 178px;\r\n    height: 178px;\r\n    line-height: 178px;\r\n    text-align: center;\r\n  }\r\n  .avatar {\r\n    width: 178px;\r\n    height: 178px;\r\n    display: block;\r\n  }\r\n</style>\r\n<style scoped>\r\n\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/components/uploadImg.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"upload\"},[_c('el-upload',{staticClass:\"avatar-uploader\",attrs:{\"action\":\"https://upload-z1.qiniup.com\",\"show-file-list\":false,\"on-success\":_vm.upload,\"data\":{token:_vm.token}}},[(_vm.img)?_c('img',{staticClass:\"avatar\",attrs:{\"src\":_vm.img}}):_c('i',{staticClass:\"el-icon-plus avatar-uploader-icon\"})])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-de52b748\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/uploadImg.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-de52b748\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./uploadImg.vue\")\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-de52b748\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=1!./uploadImg.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./uploadImg.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./uploadImg.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-de52b748\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./uploadImg.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-de52b748\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/uploadImg.vue\n// module id = null\n// module chunks = ","<template> \n  <div id=\"editor\"> \n    \n  </div>\n</template>\n\n<script>\n  import WangEditor from 'wangeditor' //引入wangeditor富文本\n  import axios from \"axios\"\n  export default {\n    name: \"editor\",\n    data() {\n      return {\n        editor:null,   //先定义一个变量editor\n        token:\"\",\n        url:\"\"\n      }\n    },\n    props:{   //子组件接收父组件传值给value\n      value:{\n        type:String\n      }\n    },\n    methods:{\n      getToken() {\n        this.$axios.qiniuGet().then(res => {\n          this.token = res.data\n        })\n      }\n    },\n    created() {  //  打开网页后执行\n      this.getToken()\n      let that = this;  //由于后面function中的this指向会发生变化，所以先赋值给that\n      this.$nextTick(() => {    //$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，\n                      //在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM \n        this.editor = new WangEditor(\"#editor\");   //创建一个富文本\n        this.editor.customConfig.onchange = function (html) { //\n        // html 即变化之后的内容\n          // console.log(html);\n          that.$emit('input',html);\n          that.$emit('getTxt',that.editor.txt.text())\n        }\n        this.editor.customConfig.customUploadImg = function (files, insert) {\n          // files 是 input 中选中的文件列表\n          // console.log(files)\n          var form = new FormData();\n          form.append(\"file\",files[0]);\n          form.append(\"token\",that.token);\n          // console.log(that.token)\n          axios.post(\"https://upload-z1.qiniup.com\",form).then(res => {\n            // console.log(res.data)\n            that.url = \"http://image.yaojunrong.com/\" + res.data.key;\n            // console.log(that.url)\n            insert(that.url)            \n          })\n          // insert 是获取图片 url 后，插入到编辑器的方法\n          // 上传代码返回结果之后，将图片插入到编辑器中\n        }\n        this.editor.create()\n        document.getElementById('editor').addEventListener('click', function () {\n            // 如果未配置 editor.customConfig.onchange，则 editor.change 为 undefined\n            that.editor.change && that.editor.change()\n        })  \n      })\n    },\n    watch:{// 监听Value的值，并将值赋值给html\n      value(val){\n        this.editor.txt.html(val)\n      }\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/editor.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"editor\"}})}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-22fe023b\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/editor.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-22fe023b\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./editor.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./editor.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./editor.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-22fe023b\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./editor.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-22fe023b\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/editor.vue\n// module id = null\n// module chunks = ","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            alt: '[坏笑]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n        }, {\n            alt: '[舔屏]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n        }, {\n            alt: '[污]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n        }]\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n            alt: '[草泥马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n            alt: '[神马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n            alt: '[浮云]'\n        }]\n    }, {\n        // tab 的标题\n        title: 'emoji',\n        // type -> 'emoji' / 'image'\n        type: 'emoji',\n        // content -> 数组\n        content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n            elemResult = replaceHtmlSymbol(elemResult);\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 100) {\n                // 间隔大于 100 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n                // val = encodeURIComponent(val)\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wangeditor/release/wangEditor.js\n// module id = sYY+\n// module chunks = 0 1"],"sourceRoot":""}